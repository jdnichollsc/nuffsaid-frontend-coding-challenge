{"version":3,"sources":["models/priority.ts","constants/constants.ts","models/message.ts","store/types.ts","store/reducer.ts","store/store.tsx","Api.ts","hooks/useApi.ts","components/MessageCard/style.ts","components/MessageCard/MessageCard.tsx","containers/ColumnContainer/style.ts","containers/ColumnContainer/ColumnContainer.tsx","screens/Home/style.ts","screens/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Priority","COLUMN_TITLES","MessageType","PRIORITY_COLORS","ERROR","WARNING","INFO","Action","MessagePriority","initialState","messages","isRunning","reducer","messagePriority","state","action","type","ClearMessages","ClearMessage","payload","priority","filter","message","id","AddMessage","ToggleRunning","GlobalContext","createContext","StoreProvider","Consumer","children","useReducer","dispatch","value","React","useMemo","Provider","observable","Observable","subscriber","generate","faker","lorem","sentence","random","nextInMS","nanoid","next","setTimeout","subscribe","callback","subscription","unsubscribe","useApi","useContext","useEffect","cleanUp","generateMessage","onClearMessages","useCallback","onClearMessage","onToggleRunning","Card","styled","MaterialCard","props","undefined","css","Content","CardContent","Actions","CardActions","MessageCard","onClear","useState","snackbarStatus","setSnackbarStatus","Fragment","onClick","disableSpacing","Button","size","color","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","TransitionComponent","Slide","direction","Column","Grid","attrs","container","ColumnContainer","title","length","map","item","Container","MaterialContainer","fixed","Box","component","sx","flexGrow","height","overflow","flexDirection","ButtonContainer","MaterialButton","variant","Row","HomeScreen","columns","error","info","warning","AppBar","Toolbar","Typography","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd82b7cd.chunk.js","sourcesContent":["export enum Priority {\n  ERROR = 0,\n  WARNING = 1,\n  INFO = 2,\n}\n\nexport const PRIORITY_COLORS = {\n  [Priority.ERROR]: '#F56236',\n  [Priority.WARNING]: '#FCE788',\n  [Priority.INFO]: '#88FCA3',\n}","export const HEADER = 'nunffsaid.com Coding Challenge'\n\nexport const COLUMN_TITLES = {\n  ERROR: 'Error Type 1',\n  WARNING: 'Warning Type 2',\n  INFO: 'Info Type 3',\n}","import { Priority } from \"./priority\"\n\nexport type Message = {\n  id: string\n  message: string\n  priority: Priority\n}\n\nexport enum MessageType {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n}\n\nexport const MessagePriority = {\n  [Priority.ERROR]: MessageType.ERROR,\n  [Priority.WARNING]: MessageType.WARNING,\n  [Priority.INFO]: MessageType.INFO,\n}","import { Reducer, Dispatch } from 'react'\nimport { Message, MessageType } from '../models/message'\n\nexport enum Action {\n  ClearMessages,\n  ClearMessage,\n  AddMessage,\n  ToggleRunning\n}\n\nexport type StoreState = {\n  messages: {\n    [MessageType.ERROR]: Message[],\n    [MessageType.WARNING]: Message[],\n    [MessageType.INFO]: Message[]\n  },\n  isRunning: boolean\n}\n\nexport type StoreAction =\n  | { type: Action.ClearMessages }\n  | { type: Action.ToggleRunning }\n  | { type: Action.ClearMessage, payload: Message }\n  | { type: Action.AddMessage, payload: Message }\n\nexport type StoreReducer = Reducer<StoreState, StoreAction>\nexport type StoreDispatch = Dispatch<StoreAction>\n\nexport type ContextProps = [StoreState, StoreDispatch]","import { MessagePriority, MessageType } from '../models/message'\nimport { StoreState, StoreAction, Action } from './types'\n\nexport const initialState: StoreState = {\n  messages: {\n    [MessageType.ERROR]: [],\n    [MessageType.WARNING]: [],\n    [MessageType.INFO]: []\n  },\n  isRunning: true,\n}\n\nexport const reducer = (\n  state = initialState,\n  action?: StoreAction,\n): StoreState => {\n  let messagePriority: MessageType\n  switch (action?.type) {\n    case Action.ClearMessages:\n      return { ...state, messages: initialState.messages }\n    case Action.ClearMessage:\n      messagePriority = MessagePriority[action.payload.priority]\n      return {\n        ...state,\n        messages: {\n          ...state.messages,\n          [messagePriority]: state.messages[messagePriority].filter((message) => message.id !== action.payload.id)\n        }\n      }\n    case Action.AddMessage:\n      messagePriority = MessagePriority[action.payload.priority]\n      return {\n        ...state,\n        messages: {\n          ...state.messages,\n          [messagePriority]: [action.payload, ...state.messages[messagePriority]]\n        }\n      }\n    case Action.ToggleRunning:\n      return { ...state, isRunning: !state.isRunning }\n    default:\n      return state\n  }\n}","\n   \nimport React, {\n  useReducer,\n  createContext,\n} from 'react'\n\nimport { StoreReducer, ContextProps } from './types'\nimport { initialState, reducer } from './reducer'\n\nexport * from './reducer'\nexport * from './types'\n\nexport const GlobalContext = createContext<ContextProps>([\n  initialState,\n  () => null\n])\nexport const StoreConsumer = GlobalContext.Consumer\n\nexport const StoreProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer<StoreReducer>(reducer, initialState)\n  const value = React.useMemo<ContextProps>(\n    () => [state, dispatch],\n    [state, dispatch]\n  )\n\n  return (\n    <GlobalContext.Provider value={value}>\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n\nexport function useStore() {\n  return React.useContext(GlobalContext)\n}","import random from 'lodash/random'\nimport faker from 'faker'\nimport { Observable } from 'rxjs'\nimport { nanoid } from 'nanoid'\n\nimport { Priority } from './models/priority'\nimport { Message } from './models/message'\n\nconst observable = new Observable<Message>(subscriber => {\n  const generate = () => {\n    const message = faker.lorem.sentence()\n    const priority = random(0, 2) as Priority\n    const nextInMS = random(500, 3000)\n    const id = nanoid()\n    subscriber.next({ message, priority, id })\n    setTimeout(generate, nextInMS)\n  }\n  generate()\n})\n\nconst subscribe = (callback: (message: Message) => void) => {\n  const subscription = observable.subscribe({\n    next: callback,\n  })\n  return () => subscription.unsubscribe()\n}\n\nexport default subscribe\n","import { useCallback, useEffect } from 'react'\nimport { Action, useStore } from '../store/store'\nimport generateMessage from '../Api'\nimport { Message } from '../models/message'\n\nexport function useApi () {\n  const [state, dispatch] = useStore()\n\n  useEffect(() => {\n    let cleanUp: () => void\n    if (state.isRunning) {\n      cleanUp = generateMessage((message: Message) => {\n        dispatch({\n          type: Action.AddMessage,\n          payload: message\n        })\n      });\n    }\n    return () => cleanUp && cleanUp();\n  }, [dispatch, state.isRunning])\n\n  const onClearMessages = useCallback(() => {\n    dispatch({ type: Action.ClearMessages })\n  }, [dispatch])\n\n  const onClearMessage = useCallback((message: Message) => {\n    dispatch({ type: Action.ClearMessage, payload: message })\n  }, [dispatch])\n\n  const onToggleRunning = useCallback(() => {\n    dispatch({ type: Action.ToggleRunning })\n  }, [dispatch])\n\n  return {\n    isRunning: state.isRunning,\n    messages: state.messages,\n    onClearMessages,\n    onClearMessage,\n    onToggleRunning\n  }\n}","import styled, { css } from 'styled-components'\nimport MaterialCard from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport { Priority, PRIORITY_COLORS } from '../../models/priority'\n\ntype CardProps = {\n  priority: Priority\n};\n\nexport const Card = styled(MaterialCard)<CardProps>`\n  color: black;\n  margin: 5px;\n  ${props =>\n    props.priority !== undefined &&\n    css`\n      background: ${PRIORITY_COLORS[props.priority]} !important;\n    `};\n`\n\nexport const Content = styled(CardContent)`\n  height: 20px;\n`\n\nexport const Actions = styled(CardActions)`\n  justify-content: flex-end;\n`","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Slide from '@material-ui/core/Slide'\n\nimport { Message } from '../../models/message'\nimport { Priority } from '../../models/priority'\nimport { Actions, Card, Content } from './style'\n\ntype MessageCardProps = Message & {\n  onClear: (message: Message) => void,\n}\n\nconst MessageCard: React.FC<MessageCardProps> = ({\n  onClear,\n  ...message\n}) => {\n  const [snackbarStatus, setSnackbarStatus] = React.useState(() => message.priority === Priority.ERROR)\n  return (\n    <React.Fragment>\n      <Card\n        priority={message.priority}\n        onClick={() => onClear(message)}\n      >\n        <Content>\n          {message.message}\n        </Content>\n        <Actions disableSpacing>\n          <Button size=\"small\" color=\"primary\">\n            Clear\n          </Button>\n        </Actions>\n      </Card>\n      <Snackbar\n        open={snackbarStatus}\n        autoHideDuration={2000}\n        message={message.message}\n        onClose={() => setSnackbarStatus(false)}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        TransitionComponent={(props) => <Slide {...props} direction=\"down\" />}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default MessageCard","import styled from 'styled-components'\nimport Grid from '@material-ui/core/Grid'\n\nexport const Column = styled(Grid).attrs({\n  container: true,\n  direction: 'column',\n})``","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { Message } from '../../models/message'\nimport MessageCard from '../../components/MessageCard/MessageCard'\nimport { Column } from './style';\n\ninterface ContainerProps {\n  title: string,\n  messages: Message[],\n  onClearMessage: (message: Message) => void,\n}\n\nconst ColumnContainer: React.FC<ContainerProps> = ({ title, messages, onClearMessage }) => {\n  return (\n    <Column>\n      <h2>{title}</h2>\n      <p>Count {messages.length}</p>\n      {messages.map(message => (\n        <Grid\n          item\n          key={message.id}\n        >\n          <MessageCard\n            {...message}\n            onClear={onClearMessage}\n          />\n        </Grid>\n      ))}\n    </Column>\n  )\n}\n\nexport default ColumnContainer","import styled from 'styled-components'\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport MaterialButton from '@material-ui/core/Button'\nimport MaterialContainer from '@material-ui/core/Container'\n\nexport const Container = styled(MaterialContainer).attrs({\n  fixed: true,\n})`\n  display: flex;\n`\n\nexport const Content = styled(Box).attrs({\n  component: 'main',\n  sx: {\n    flexGrow: 1,\n    height: '100%',\n    overflow: 'auto',\n    flexDirection: 'column',\n  }\n})`\n  display: flex;\n  padding-top: 60px;\n`\n\nexport const ButtonContainer = styled(Grid)`\n  display: flex;\n  justify-content: center;\n  padding: 1rem;\n`\n\nexport const Button = styled(MaterialButton).attrs({\n  variant: 'contained',\n})`\n  margin: 3px !important;\n  background-color: #82EEA2 !important;\n`\n\nexport const Row = styled(Grid)`\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n`","import React, { useMemo } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nimport { COLUMN_TITLES, HEADER } from '../../constants/constants'\nimport { useApi } from '../../hooks/useApi'\nimport ColumnContainer from '../../containers/ColumnContainer/ColumnContainer'\nimport { MessageType } from '../../models/message'\nimport { Button, ButtonContainer, Container, Content, Row } from './style'\n\nexport default function HomeScreen() {\n  const {isRunning, messages, onClearMessage, onClearMessages, onToggleRunning} = useApi()\n\n  const columns = useMemo(() => {\n    return {\n      error: messages[MessageType.ERROR],\n      info: messages[MessageType.INFO],\n      warning: messages[MessageType.WARNING],\n    }\n  }, [messages])\n\n  return (\n    <Container>\n      <AppBar>\n        <Toolbar variant=\"regular\">\n          <Typography variant=\"h6\" component=\"div\">\n            {HEADER} ❤️\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Content>\n        <ButtonContainer>\n          <Button onClick={onToggleRunning}>\n            {isRunning ? 'Stop' : 'Start'}\n          </Button>\n          <Button onClick={onClearMessages}>Clear</Button>\n        </ButtonContainer>\n        <Row>\n          <ColumnContainer title={COLUMN_TITLES.ERROR} messages={columns.error} onClearMessage={onClearMessage} />\n          <ColumnContainer title={COLUMN_TITLES.WARNING} messages={columns.info} onClearMessage={onClearMessage} />\n          <ColumnContainer title={COLUMN_TITLES.INFO} messages={columns.warning} onClearMessage={onClearMessage} />\n        </Row>\n      </Content>\n    </Container>\n  )\n}","import React from 'react'\nimport HomeScreen from './screens/Home/Home'\nimport { StoreProvider } from './store/store'\n\n\nconst App: React.FC<{}> = () => {\n  return (\n    <StoreProvider>\n      <HomeScreen />\n    </StoreProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}